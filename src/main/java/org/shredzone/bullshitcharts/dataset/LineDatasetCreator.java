/**
 * bullshitcharts - A Bullshit Chart Generator
 *
 * Copyright (C) 2009 Richard "Shred" Körber
 *   http://bullshitcharts.shredzone.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.shredzone.bullshitcharts.dataset;

import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 * Creates a random {@link CategoryDataset}.
 * 
 * @author  Richard Körber {@literal dev@shredzone.de}
 * @version $Id: LineDatasetCreator.java 298 2009-05-07 22:24:14Z shred $
 */
public class LineDatasetCreator {
    
    private Tendency tendency = Tendency.DONTCARE;
    private int numberOfValues = 12;
    private double amplitude = 0.2d;

    /**
     * Sets the {@link Tendency} to be used for this dataset. Default is
     * {@code Tendency.DONTCARE}.
     * 
     * @param tendency
     *            {@link Tendency} to be used
     */
    public void setTendency(Tendency tendency) {
        this.tendency = tendency;
    }
    
    /**
     * Sets the number of values generated by this dataset. A small number will
     * result in a coarse line graphics, and a large number gives a fine
     * graphics.
     *
     * @param numberOfValues
     *            Number of values, 0 is not allowed!
     */
    public void setNumberOfValues(int numberOfValues) {
        this.numberOfValues = numberOfValues;
    }

    /**
     * Sets the amplitude of the curve. The higher the value, the more chaotic
     * the curve looks like. This value is ignored when {@code Tendency.DONTCARE}
     * is used. 0 will disable the random effect and will return a smooth curve.
     * A value of 0.4 or greater might introduce clipping effects, this is, parts
     * of the curve might be out of the generated graphics. Default is 0.2.
     *
     * @param amplitude
     *            Amplitude of the random effect. Should be less than 0.4.
     */
    public void setAmplitude(double amplitude) {
        this.amplitude = amplitude;
    }
    
    /**
     * Generates a {@link CategoryDataset} out of the given parameters.
     * 
     * @return {@link CategoryDataset}
     */
    public CategoryDataset generate() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        double[] values = new double[numberOfValues];
        
        if (tendency == Tendency.DONTCARE) {
            for (int ix = 0; ix < numberOfValues; ix++) {
                values[ix] = Math.random();
            }
        } else {
            double start = 0.0d, end = 0.0d;
            
            switch (tendency) {
            case DISASTROUS:
                start = 0.8d;
                end = 0.2d;
                break;
                
            case PESSIMISTIC:
                start = 0.7d;
                end = 0.3d;
                break;
                
            case NEUTRAL:
                start = 0.5d;
                end = 0.5d;
                break;
                
            case OPTIMISTIC:
                start = 0.3d;
                end = 0.7d;
                break;
                
            case EUPHORIC:
                start = 0.2d;
                end = 0.8d;
                break;
            }
            
            int maxValue = numberOfValues - 1;
            double factor = (end - start) / (maxValue * maxValue);
            double ampliOffset = amplitude / 2;
            
            for (int ix = 0; ix < numberOfValues; ix++) {
                double base = factor * ix * ix + start; // ax² + 0x + c
                values[ix] = base + (Math.random() * amplitude - ampliOffset);
            }
        }
        
        for (int ix = 0; ix < values.length; ix++) {
            dataset.setValue(values[ix], "Value", String.valueOf(ix));
        }
        
        return dataset;
    }
    
}
